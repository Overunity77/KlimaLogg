#ifndef BITCONVERTER_H
#define BITCONVERTER_H

#include "bitconverter_global.h"

struct SensorData
{
    double Temperature;
    bool TempValid;
    double Humidity;
    bool HumValid;
};

struct Record
{
    long Timestamp;
    bool TimeValid;
    SensorData SensorDatas[9];
};


class BITCONVERTERSHARED_EXPORT BitConverter
{

public:
    BitConverter();
    static bool ConvertTemperature(short data, bool highByteFull, double *value);
    static bool ConvertHumidity(char data, double *value);
    static bool ConvertHistoryTimestamp(char *data, long *value);
    static bool ConvertCurrentTimestamp(char *data, bool startOnHighNibble, long *value);

    static Record GetSensorValuesFromHistoryData(char* frame, int index);
    static Record GetSensorValuesFromCurrentData(char* frame);


    //static void ConvertUSBFrame(char* data, long *timestamp, SesnorData *values);
};

#endif // BITCONVERTER_H


/*
	TEST_CLASS(UnitTest1)
	{
	public:
		
		TEST_METHOD(TestMethod1)
		{
			char CurrentDataframe[] = {
				0x00, 0x00, 0xe5, 0x01, 0x07, 0x00, 0x30, 0x64, 0x1a, 0xb1, 0x13, 0x62, 0x10, 0x52, 0x14, 0x91,
				0x85, 0xa3, 0x98, 0x32, 0x55, 0x01, 0x49, 0x17, 0x5d, 0x81, 0x41, 0x27, 0x43, 0x87, 0x36, 0x38,
				0x56, 0x56, 0x14, 0xa1, 0x87, 0x29, 0x14, 0x91, 0x85, 0xa4, 0x89, 0x38, 0xaa, 0x01, 0x49, 0x17,
				0x5d, 0x51, 0x49, 0x23, 0x75, 0x17, 0x44, 0x49, 0x4a, 0xaa, 0x14, 0xa1, 0x41, 0xc5, 0x14, 0x91,
				0x85, 0xb2, 0x91, 0x40, 0x64, 0x01, 0x49, 0x17, 0x5e, 0x91, 0x4a, 0x22, 0x7b, 0x27, 0x32, 0x50,
				0x26, 0x42, 0x14, 0xa2, 0x04, 0xc0, 0x14, 0x91, 0x85, 0xa4, 0x84, 0x38, 0x67, 0x01, 0x49, 0x17,
				0x5d, 0x61, 0x4a, 0x22, 0x6c, 0x07, 0x44, 0x50, 0x06, 0x38, 0x14, 0xa2, 0x06, 0xc7, 0x14, 0x91,
				0x85, 0xb2, 0x87, 0x41, 0xaa, 0x01, 0x49, 0x17, 0x5d, 0x31, 0x49, 0x19, 0x81, 0x57, 0x40, 0x52,
				0x1a, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa,
				0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a,
				0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa, 0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa,
				0xaa, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa,
				0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0x4a, 0xa4, 0xaa, 0xaa, 0x4a,
				0xa4, 0xaa, 0xaa, 0xaa, 0xaa, 0x0a, 0xa4, 0xaa, 0x4a, 0xaa, 0xa4, 0xaa, 0x4a, 0xaa, 0xaa, 0xaa,
				0xaa, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00
			};

			Record data = BitConverter::GetSensorValuesFromCurrentData(CurrentDataframe);

			char HistoricDataFrame[] = {
				0x00, 0x00, 0xb5, 0x01, 0x07, 0x00, 0x40, 0x64, 0x1a, 0xb1, 0x1e, 0x4e, 0x40, 0x07, 0x01, 0x80,
				0xaa, 0xaa, 0xaa, 0xaa, 0x50, 0x47, 0x54, 0x51, 0x52, 0x0a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa6,
				0x32, 0x64, 0x56, 0x21, 0x62, 0x96, 0x28, 0x13, 0x05, 0x16, 0x19, 0x15, 0xaa, 0xaa, 0xaa, 0xaa,
				0x50, 0x46, 0x53, 0x51, 0x51, 0x0a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa6, 0x36, 0x64, 0x86, 0x21,
				0x63, 0x06, 0x33, 0x13, 0x05, 0x16, 0x19, 0x00, 0xaa, 0xaa, 0xaa, 0xaa, 0x50, 0x44, 0x54, 0x51,
				0x52, 0x0a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa6, 0x38, 0x65, 0x36, 0x21, 0x63, 0x16, 0x36, 0x13,
				0x05, 0x16, 0x18, 0x45, 0xaa, 0xaa, 0xaa, 0xaa, 0x49, 0x44, 0x54, 0x51, 0x52, 0x0a, 0xaa, 0xaa,
				0xaa, 0xaa, 0xaa, 0xa6, 0x46, 0x65, 0x76, 0x22, 0x63, 0x36, 0x33, 0x13, 0x05, 0x16, 0x18, 0x30,
				0xaa, 0xaa, 0xaa, 0xaa, 0x49, 0x43, 0x55, 0x51, 0x53, 0x0a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa6,
				0x46, 0x66, 0x06, 0x22, 0x63, 0x46, 0x29, 0x13, 0x05, 0x16, 0x18, 0x15, 0xaa, 0xaa, 0xaa, 0xaa,
				0x51, 0x43, 0x56, 0x51, 0x54, 0x0a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xa6, 0x44, 0x66, 0x56, 0x22,
				0x63, 0x36, 0x28, 0x13, 0x05, 0x16, 0x18, 0x00
			};
				for(int i = 0; i < 6; i++)
				{
					data = BitConverter::GetSensorValuesFromHistoryData(HistoricDataFrame, i);
				}
		}

	};

*/